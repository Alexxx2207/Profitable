// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Profitable.Data;

#nullable disable

namespace Profitable.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230312182637_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Profitable.Models.EntityModels.ApplicationUser", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrganizationRole")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePictureURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Guid");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Profitable.Models.EntityModels.Book", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Authors")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Guid");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Profitable.Models.EntityModels.COTReport", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("AssetManagersLong")
                        .HasColumnType("bigint");

                    b.Property<long>("AssetManagersLongChange")
                        .HasColumnType("bigint");

                    b.Property<long>("AssetManagersShort")
                        .HasColumnType("bigint");

                    b.Property<long>("AssetManagersShortChange")
                        .HasColumnType("bigint");

                    b.Property<Guid>("COTReportedInstrumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DatePublished")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("LeveragedFundsLong")
                        .HasColumnType("bigint");

                    b.Property<long>("LeveragedFundsLongChange")
                        .HasColumnType("bigint");

                    b.Property<long>("LeveragedFundsShort")
                        .HasColumnType("bigint");

                    b.Property<long>("LeveragedFundsShortChange")
                        .HasColumnType("bigint");

                    b.HasKey("Guid");

                    b.HasIndex("COTReportedInstrumentId");

                    b.ToTable("COTReports");
                });

            modelBuilder.Entity("Profitable.Models.EntityModels.COTReportedInstrument", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("InstrumentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Guid");

                    b.ToTable("COTReportedInstruments");
                });

            modelBuilder.Entity("Profitable.Models.EntityModels.Exchange", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Guid");

                    b.ToTable("Exchanges");
                });

            modelBuilder.Entity("Profitable.Models.EntityModels.FinancialInstrument", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExchangeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MarketTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TickerSymbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Guid");

                    b.HasIndex("ExchangeId");

                    b.HasIndex("MarketTypeId");

                    b.ToTable("FinancialInstruments");
                });

            modelBuilder.Entity("Profitable.Models.EntityModels.FuturesContract", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TickSize")
                        .HasColumnType("float");

                    b.Property<double>("TickValue")
                        .HasColumnType("float");

                    b.HasKey("Guid");

                    b.ToTable("FuturesContracts");
                });

            modelBuilder.Entity("Profitable.Models.EntityModels.FuturesPosition", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Direction")
                        .HasColumnType("int");

                    b.Property<Guid>("FuturesContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("TradePositionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Guid");

                    b.HasIndex("FuturesContractId");

                    b.HasIndex("TradePositionId");

                    b.ToTable("FuturesPositions");
                });

            modelBuilder.Entity("Profitable.Models.EntityModels.Journal", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PostedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Guid");

                    b.HasIndex("UserId");

                    b.ToTable("Journals");
                });

            modelBuilder.Entity("Profitable.Models.EntityModels.MarketType", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Guid");

                    b.ToTable("MarketTypes");
                });

            modelBuilder.Entity("Profitable.Models.EntityModels.Organization", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Guid");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Profitable.Models.EntityModels.OrganizationMessage", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SentOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Guid");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("SenderId");

                    b.ToTable("OrganizationsMessages");
                });

            modelBuilder.Entity("Profitable.Models.EntityModels.PositionsRecordList", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("InstrumentGroup")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Guid");

                    b.HasIndex("UserId");

                    b.ToTable("PositionsRecordLists");
                });

            modelBuilder.Entity("Profitable.Models.EntityModels.StocksPosition", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("BuyCommission")
                        .HasColumnType("float");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SellCommission")
                        .HasColumnType("float");

                    b.Property<Guid>("TradePositionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Guid");

                    b.HasIndex("TradePositionId");

                    b.ToTable("StocksPositions");
                });

            modelBuilder.Entity("Profitable.Models.EntityModels.TradePosition", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<double>("EntryPrice")
                        .HasColumnType("float");

                    b.Property<double>("ExitPrice")
                        .HasColumnType("float");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PositionAddedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PositionsRecordListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("QuantitySize")
                        .HasColumnType("float");

                    b.Property<double>("RealizedProfitAndLoss")
                        .HasColumnType("float");

                    b.HasKey("Guid");

                    b.HasIndex("PositionsRecordListId");

                    b.ToTable("TradePositions");
                });

            modelBuilder.Entity("Profitable.Models.EntityModels.ApplicationUser", b =>
                {
                    b.HasOne("Profitable.Models.EntityModels.Organization", "Organization")
                        .WithMany("Users")
                        .HasForeignKey("OrganizationId");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Profitable.Models.EntityModels.COTReport", b =>
                {
                    b.HasOne("Profitable.Models.EntityModels.COTReportedInstrument", "COTReportedInstrument")
                        .WithMany("COTReports")
                        .HasForeignKey("COTReportedInstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("COTReportedInstrument");
                });

            modelBuilder.Entity("Profitable.Models.EntityModels.FinancialInstrument", b =>
                {
                    b.HasOne("Profitable.Models.EntityModels.Exchange", "Exchange")
                        .WithMany()
                        .HasForeignKey("ExchangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Profitable.Models.EntityModels.MarketType", "MarketType")
                        .WithMany()
                        .HasForeignKey("MarketTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exchange");

                    b.Navigation("MarketType");
                });

            modelBuilder.Entity("Profitable.Models.EntityModels.FuturesPosition", b =>
                {
                    b.HasOne("Profitable.Models.EntityModels.FuturesContract", "FuturesContract")
                        .WithMany()
                        .HasForeignKey("FuturesContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Profitable.Models.EntityModels.TradePosition", "TradePosition")
                        .WithMany()
                        .HasForeignKey("TradePositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FuturesContract");

                    b.Navigation("TradePosition");
                });

            modelBuilder.Entity("Profitable.Models.EntityModels.Journal", b =>
                {
                    b.HasOne("Profitable.Models.EntityModels.ApplicationUser", "User")
                        .WithMany("Journals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Profitable.Models.EntityModels.OrganizationMessage", b =>
                {
                    b.HasOne("Profitable.Models.EntityModels.Organization", "Organization")
                        .WithMany("Messages")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Profitable.Models.EntityModels.ApplicationUser", "Sender")
                        .WithMany("Messages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Profitable.Models.EntityModels.PositionsRecordList", b =>
                {
                    b.HasOne("Profitable.Models.EntityModels.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Profitable.Models.EntityModels.StocksPosition", b =>
                {
                    b.HasOne("Profitable.Models.EntityModels.TradePosition", "TradePosition")
                        .WithMany()
                        .HasForeignKey("TradePositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TradePosition");
                });

            modelBuilder.Entity("Profitable.Models.EntityModels.TradePosition", b =>
                {
                    b.HasOne("Profitable.Models.EntityModels.PositionsRecordList", "PositionsRecordList")
                        .WithMany("Positions")
                        .HasForeignKey("PositionsRecordListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PositionsRecordList");
                });

            modelBuilder.Entity("Profitable.Models.EntityModels.ApplicationUser", b =>
                {
                    b.Navigation("Journals");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Profitable.Models.EntityModels.COTReportedInstrument", b =>
                {
                    b.Navigation("COTReports");
                });

            modelBuilder.Entity("Profitable.Models.EntityModels.Organization", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Profitable.Models.EntityModels.PositionsRecordList", b =>
                {
                    b.Navigation("Positions");
                });
#pragma warning restore 612, 618
        }
    }
}
